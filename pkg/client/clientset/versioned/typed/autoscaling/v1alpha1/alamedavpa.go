/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/containers-ai/alameda/pkg/apis/autoscaling/v1alpha1"
	scheme "github.com/containers-ai/alameda/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AlamedaVPAsGetter has a method to return a AlamedaVPAInterface.
// A group's client should implement this interface.
type AlamedaVPAsGetter interface {
	AlamedaVPAs(namespace string) AlamedaVPAInterface
}

// AlamedaVPAInterface has methods to work with AlamedaVPA resources.
type AlamedaVPAInterface interface {
	Create(*v1alpha1.AlamedaVPA) (*v1alpha1.AlamedaVPA, error)
	Update(*v1alpha1.AlamedaVPA) (*v1alpha1.AlamedaVPA, error)
	UpdateStatus(*v1alpha1.AlamedaVPA) (*v1alpha1.AlamedaVPA, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.AlamedaVPA, error)
	List(opts v1.ListOptions) (*v1alpha1.AlamedaVPAList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AlamedaVPA, err error)
	AlamedaVPAExpansion
}

// alamedaVPAs implements AlamedaVPAInterface
type alamedaVPAs struct {
	client rest.Interface
	ns     string
}

// newAlamedaVPAs returns a AlamedaVPAs
func newAlamedaVPAs(c *AutoscalingV1alpha1Client, namespace string) *alamedaVPAs {
	return &alamedaVPAs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the alamedaVPA, and returns the corresponding alamedaVPA object, and an error if there is any.
func (c *alamedaVPAs) Get(name string, options v1.GetOptions) (result *v1alpha1.AlamedaVPA, err error) {
	result = &v1alpha1.AlamedaVPA{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("alamedavpas").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AlamedaVPAs that match those selectors.
func (c *alamedaVPAs) List(opts v1.ListOptions) (result *v1alpha1.AlamedaVPAList, err error) {
	result = &v1alpha1.AlamedaVPAList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("alamedavpas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested alamedaVPAs.
func (c *alamedaVPAs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("alamedavpas").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a alamedaVPA and creates it.  Returns the server's representation of the alamedaVPA, and an error, if there is any.
func (c *alamedaVPAs) Create(alamedaVPA *v1alpha1.AlamedaVPA) (result *v1alpha1.AlamedaVPA, err error) {
	result = &v1alpha1.AlamedaVPA{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("alamedavpas").
		Body(alamedaVPA).
		Do().
		Into(result)
	return
}

// Update takes the representation of a alamedaVPA and updates it. Returns the server's representation of the alamedaVPA, and an error, if there is any.
func (c *alamedaVPAs) Update(alamedaVPA *v1alpha1.AlamedaVPA) (result *v1alpha1.AlamedaVPA, err error) {
	result = &v1alpha1.AlamedaVPA{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("alamedavpas").
		Name(alamedaVPA.Name).
		Body(alamedaVPA).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *alamedaVPAs) UpdateStatus(alamedaVPA *v1alpha1.AlamedaVPA) (result *v1alpha1.AlamedaVPA, err error) {
	result = &v1alpha1.AlamedaVPA{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("alamedavpas").
		Name(alamedaVPA.Name).
		SubResource("status").
		Body(alamedaVPA).
		Do().
		Into(result)
	return
}

// Delete takes name of the alamedaVPA and deletes it. Returns an error if one occurs.
func (c *alamedaVPAs) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("alamedavpas").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *alamedaVPAs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("alamedavpas").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched alamedaVPA.
func (c *alamedaVPAs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.AlamedaVPA, err error) {
	result = &v1alpha1.AlamedaVPA{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("alamedavpas").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
